import json
import numpy as np
import re

def _load_json(file):
    """
    Load JSON data from a file.

    Args:
        file (str): The path to the JSON file.

    Returns:
        dict: The loaded JSON data as a dictionary.
    """
    with open(file) as bot_responses:
        return json.load(bot_responses)

def _no_match_found():
    no_match_responses = [
    "I'm sorry, I couldn't find a matching response. If you have any questions about reducing your carbon footprint, feel free to ask!",
    "Hmm, it seems I don't have a response for that. However, I'm knowledgeable about carbon footprints. Do you have any questions about reducing yours?",
    "I apologize, but I'm not able to provide a specific answer. On the bright side, I'm well-versed in carbon footprint-related topics. Is there something you'd like to know about it?",
    "Unfortunately, I don't have a response to that. Let's shift the focus to carbon footprints. How can I assist you with reducing yours?",
    "It appears that I don't have the information you're looking for. Let's pivot to the topic of carbon footprints. How can I help you with reducing your impact?",
    "I'm afraid I don't have a response for that, but I'd be happy to discuss ways to lower your carbon footprint. What specific questions do you have?",
    "I'm sorry, I couldn't find a direct answer. However, I can provide insights on minimizing carbon footprint. What would you like to know about it?",
    "Hmm, it seems I can't address your query directly. Nevertheless, I'm well-equipped to discuss ways to reduce your carbon footprint. What would you like to explore?",
    "I'm sorry, I don't have a response for that particular question. Let's talk about carbon footprint instead. How can I assist you in making a positive environmental impact?",
    "Unfortunately, I don't have the information you're seeking. But I'm here to guide you in understanding and minimizing your carbon footprint. What aspects are you curious about?",]
    return np.random.choice(no_match_responses)

def _is_connector(user_input):
    connecting_words = [
        "how", "why", "you", "are", "is", "and", "what", "where", "when", "who",
        "which", "whom", "whose", "will", "would", "could", "can", "should", "do",
        "did", "does", "have", "has", "had", "if", "for"
    ]
    return np.any(np.char.equal(user_input, connecting_words))
    

response_data = _load_json("data.json")

def get_response(user_input: str) -> str:
    """
    Generate a response from the chatbot based on user input.

    The function processes the user input by cleaning it, extracting keywords, and calculating a matching score
    for each response in the response data. The response with the highest score is selected as the output.

    The scoring system works as follows:
    - An exact match between the user input and a keyword in a response contributes to the score.
    - Partial matches between the user input and keywords also contribute to the score.
    - Responses with a higher number of matching keywords receive higher scores.
    - Responses that match all user keywords receive a bonus score.
    - The response with the highest score is randomly selected if multiple responses have similar scores.

    Args:
        user_input (str): The input provided by the user.

    Returns:
        str: The response generated by the chatbot.
"""

    user_input = re.sub(r'[^a-zA-Z0-9\s]', '', user_input.lower())
    if user_input =="":
        return "Im right here, just let me know when you need me." 
    user_keywords = user_input.split()
    user_keywords_length = len(user_keywords)
    scores = np.zeros(len(response_data))
    exact_matches =[]
    for i, response in enumerate(response_data):
        keywords = response['keywords']
        try:
            if np.char.equal(user_keywords,keywords).all():
                scores[i] += user_keywords_length+user_keywords_length*0.2
                continue
        except ValueError:
            pass
        for keyword in keywords:
            matches = np.isin(keyword, user_keywords)   
            if _is_connector(keyword):
                scores[i] -= 0.3    
            if matches.all():
                scores[i] += 0.5
            if user_input==keyword:
                scores[i] += 0.8
                exact_matches.append(response['response'])

        scores[i] += np.sum(matches)
    max_score = np.max(scores)
    max_score_indices = np.where(scores >= (max_score - 0.5))[0]

    if exact_matches:
        return np.random.choice(exact_matches)
    
    if max_score > 0 and len(max_score_indices) > 0:
        random_index = np.random.choice(max_score_indices)
        return response_data[random_index]["response"]
    else:
        return _no_match_found()




if __name__ == '__main__':
    while True:
        user_input = input("You: ")
        print("Bot:", get_response(user_input))
